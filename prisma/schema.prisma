generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @unique @default(uuid())
  email         String
  todos         Todo[]
  name          String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Streak        Streak[]

  @@map("user")
}

model Todo {
  id                   String  @unique @default(uuid())
  User                 User?   @relation(fields: [userId], references: [id])
  userId               String?
  task                 Task[]
  createdAt            String
  updatedAt            String
  hasCompletedAllTasks Boolean @default(false)
  Notes                Notes[]
}

model Task {
  id        String    @unique @default(uuid())
  todoId    String
  todo      Todo      @relation(fields: [todoId], references: [id], onDelete: Cascade)
  title     String
  completed Boolean
  createdAt DateTime
  updatedAt DateTime
  SubTask   SubTask[]

  @@index([todoId], name: "task_todoId_idx")
  @@map("task")
}

model SubTask {
  id        String   @unique @default(uuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  title     String
  completed Boolean
  createdAt DateTime
  updatedAt DateTime

  @@index([taskId], name: "subtask_taskId_idx")
  @@map("subtask")
}

model Notes {
  id        String   @id @default(uuid())
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Todo      Todo?    @relation(fields: [todoId], references: [id])
  todoId    String?
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Streak {
  id            String   @id @default(uuid())
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  lastUpdated   DateTime @default("1970-01-01T00:00:00Z")
}
